---
- name: Install Docker
  hosts: 
    - sedge_Edge
    - sedge_Cloud

  tasks:
    - name: Check for Docker
      ansible.builtin.shell: "docker ps > /dev/null"
      register: check
      ignore_errors: True

    - name: Install Docker
      ansible.builtin.command: amazon-linux-extras install -y docker
      become: yes
      when: check.failed

    - name: Add user to Docker group
      ansible.builtin.command: usermod -a -G docker {{ ansible_user }}
      become: yes
      when: check.failed
      register: groupupdated

    - name: Start docker
      ansible.builtin.command: systemctl start docker
      become: yes

    - name: reset ssh connection
      meta: reset_connection
      when: groupupdated

- name: Install Etcd
  hosts: sedge_Cloud[0]
  vars:
    app_dir: /home/{{ ansible_user }}/etcd
    etcd_version: v3.4.17
    etcd_release_url: https://github.com/etcd-io/etcd/releases/download/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-amd64.tar.gz

  tasks:
    - name: Create remote directory
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'

    - name: Download binaries
      ansible.builtin.get_url:
        url: "{{ etcd_release_url }}"
        dest: /tmp/etcd-release.tar.gz
      register: downloaded_binary

    - name: Extract binaries
      ansible.builtin.unarchive:
        src: /tmp/etcd-release.tar.gz
        remote_src: yes
        dest: "{{ app_dir }}"
      when: downloaded_binary.changed
      register: extracted_binaries

    - name: Install systemd service
      ansible.builtin.template:
        src: "templates/etcd.service.j2"
        dest: "/etc/systemd/system/myetcd.service"
        owner: root
        group: root
      become: yes
      register: changed_service

    - name: Start etcd service
      ansible.builtin.systemd:
        name: myetcd
        state: restarted
        daemon_reload: yes
      become: yes


- name: Install ServerlEdge at the Edge
  hosts: sedge_Edge
  vars:
    app_dir: /home/{{ ansible_user }}/serverledge
    conf_template: templates/edge-configuration.yaml.j2

  tasks:
    - include_tasks: tasks/serverledge.yml

- name: Install ServerlEdge in the Cloud
  hosts: sedge_Cloud
  vars:
    app_dir: /home/{{ ansible_user }}/serverledge
    conf_template: templates/cloud-configuration.yaml.j2

  tasks:
    - include_tasks: tasks/serverledge.yml

- name: Install LB in the Cloud
  hosts: sedge_Cloud[-1]
  vars:
    app_dir: /home/{{ ansible_user }}/serverledge
    conf_template: templates/lb-configuration.yaml.j2

  tasks:
    - name: Copy serverledge binary
      ansible.builtin.copy:
        src: "{{ serverledge_local_bin_dir }}/lb"
        dest: "{{ app_dir }}/lb"
        mode: '0755'
      register: uploaded_binary

    - name: Install configuration file
      ansible.builtin.template:
        src: "{{ conf_template }}"
        dest: "{{ app_dir }}/conflb.yml"
        owner: root
        group: root
      become: yes
      register: update_conf

    - name: Install systemd service
      ansible.builtin.template:
        src: "templates/serverledgelb.service.j2"
        dest: "/etc/systemd/system/serverledgelb.service"
        owner: root
        group: root
      become: yes
      register: changed_service

    - name: Start systemd service
      ansible.builtin.systemd:
        name: serverledgelb
        state: restarted
        daemon_reload: yes
      become: yes

- name: Configure Client
  hosts: 
    - sedge_Client

  tasks:
    - name: Copy serverledge CLI binary
      ansible.builtin.copy:
        src: "{{ serverledge_local_bin_dir }}/serverledge-cli"
        dest: /home/{{ ansible_user }}/
        mode: '0755'

    - name: Install Java
      ansible.builtin.command: amazon-linux-extras install -y java-openjdk11
      become: yes

    - name: Install JMeter
      ansible.builtin.unarchive:
        src: https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.5.tgz
        dest: /home/{{ ansible_user}}/
        remote_src: yes
