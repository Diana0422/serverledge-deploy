---
- name: Set delay on the Client node
  hosts:
    - sedge_Client
  tasks:
    - name: copy delay script on Client node
      copy:
        src: delay_scripts/delay_script_client.sh
        dest: delay_script_client.sh
    - name: set execution permissions for the script
      ansible.builtin.shell: chmod +x delay_script_client.sh
    - name: execute script on Client node
      ansible.builtin.shell: ./delay_script_client.sh

- name: Set delay on the Cloud node
  hosts:
    - sedge_Cloud
  tasks:
    - name: copy delay script on Cloud node
      copy:
        src: delay_scripts/delay_script_cloud.sh
        dest: delay_script_cloud.sh
    - name: set execution permissions for the script
      ansible.builtin.shell: chmod +x delay_script_cloud.sh
    - name: execute script on Cloud node
      ansible.builtin.shell: ./delay_script_cloud.sh

- name: Set delay one the Edge node 1
  hosts:
    - sedge_Edge[0]
  tasks:
    - name: copy delay script on the Edge node 1
      copy:
        src: delay_scripts/delay_script_edge1.sh
        dest: delay_script_edge1.sh
    - name: set execution permissions for the script
      ansible.builtin.shell: chmod +x delay_script_edge1.sh
    - name: execute script on Edge 1 node
      ansible.builtin.shell: ./delay_script_edge1.sh

- name: Set delay on the Edge node 2
  hosts:
    - sedge_Edge[1]
  tasks:
    - name: copy delay script on the Edge node 2
      copy:
        src: delay_scripts/delay_script_edge2.sh
        dest: delay_script_edge2.sh
    - name: set execution permission for the script
      ansible.builtin.shell: chmod +x delay_script_edge2.sh
    - name: execute script on Edge 2 node
      ansible.builtin.shell: ./delay_script_edge2.sh

- name: Set delay on the Edge node 3
  hosts:
    - sedge_Edge[2]
  tasks:
    - name: copy delay script on the Edge node 3
      copy:
        src: delay_scripts/delay_script_edge3.sh
        dest: delay_script_edge3.sh
    - name: set execution permission for the script
      ansible.builtin.shell: chmod +x delay_script_edge3.sh
    - name: execute script on Edge 3 node
      ansible.builtin.shell: ./delay_script_edge3.sh

- name: Prune previous Docker containers
  hosts:
    - sedge_Edge
    - sedge_Cloud
  tasks:
    - name: Stop and remove all containers
      ansible.builtin.shell:  docker rm -f $(docker ps -a -q)
      ignore_errors: True

- name: Install and Start InfluxDb
  hosts:
    - sedge_Edge
    - sedge_Cloud
  tasks:
    - name: Stop old containers
      ansible.builtin.shell: docker stop InfluxDb
      ignore_errors: True

    # Fixme: added to resolve docker EOF error (maybe temporary)
    - name: restart docker service
      ansible.builtin.command: service docker restart

    - name: Start InfluxDb
      ansible.builtin.shell: docker run -d --rm -p 8086:8086 --name InfluxDb
        -e DOCKER_INFLUXDB_INIT_MODE=setup \
        -e DOCKER_INFLUXDB_INIT_USERNAME=user \
        -e DOCKER_INFLUXDB_INIT_PASSWORD=password \
        -e DOCKER_INFLUXDB_INIT_ORG=serverledge \
        -e DOCKER_INFLUXDB_INIT_BUCKET=completions \
        -e DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=serverledge \
        influxdb

- name: Restart Etcd
  hosts: sedge_Cloud[0]
  tasks:
    - name: Restart etcd service
      ansible.builtin.systemd:
        name: myetcd
        state: restarted
        daemon_reload: yes
      become: yes

    - name: Wipe data
      ansible.builtin.shell: ETCDCTL_API=3 etcdctl del "" --from-key=true

- name: Restart Serverledge on Host 3 and Cloud
  hosts: 
    - sedge_Edge[2]
    - sedge_Cloud
  tasks:
    - include_tasks:
        file: tasks/restart_serverledge.yml

    - name: Install CPU monitoring script
      ansible.builtin.copy:
        src: monitorCPU.sh
        dest: "{{ ansible_env.HOME }}"
        mode: '0755'

    - name: Install CPU monitoring service
      ansible.builtin.template:
        src: monitorCPU.service.j2
        dest: /etc/systemd/system/monitorCPU.service
        owner: root
        group: root
      become: yes
      register: monitor_service

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes
      become: yes
      when: monitor_service.changed

    - name: Start systemd service
      ansible.builtin.systemd:
        name: monitorCPU
        state: restarted
      become: yes

- name: Restart Serverledge on Host 2
  hosts:
    - sedge_Edge[1]
  tasks:
    - include_tasks:
        file: tasks/restart_serverledge.yml

    - name: Install CPU monitoring script
      ansible.builtin.copy:
        src: monitorCPU.sh
        dest: "{{ ansible_env.HOME }}"
        mode: '0755'

    - name: Install CPU monitoring service
      ansible.builtin.template:
        src: monitorCPU.service.j2
        dest: /etc/systemd/system/monitorCPU.service
        owner: root
        group: root
      become: yes
      register: monitor_service

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes
      become: yes
      when: monitor_service.changed

    - name: Start systemd service
      ansible.builtin.systemd:
        name: monitorCPU
        state: restarted
      become: yes

- name: Restart Serverledge on Host 1
  hosts:
    - sedge_Edge[0]
  tasks:
    - include_tasks:
        file: tasks/restart_serverledge.yml

    - name: Install CPU monitoring script
      ansible.builtin.copy:
        src: monitorCPU.sh
        dest: "{{ ansible_env.HOME }}"
        mode: '0755'

    - name: Install CPU monitoring service
      ansible.builtin.template:
        src: monitorCPU.service.j2
        dest: /etc/systemd/system/monitorCPU.service
        owner: root
        group: root
      become: yes
      register: monitor_service

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes
      become: yes
      when: monitor_service.changed

    - name: Start systemd service
      ansible.builtin.systemd:
        name: monitorCPU
        state: restarted
      become: yes

- name: Install and Start Solver
  hosts:
    - sedge_Cloud[0]
  tasks:
    - name: Stop old containers
      ansible.builtin.shell: docker stop Solver
      ignore_errors: True

    # Fixme: added to resolve docker EOF error (maybe temporary)
    #- name: restart docker service
    #  ansible.builtin.command: service docker restart

    - name: Start Solver
      ansible.builtin.shell: docker run -d -p 2500:2500 --rm --name Solver diana0422/serverledge-solver

- name: Quick benchmark
  hosts: 
    - sedge_Client
  vars:
    # Fibonacci
    func_name: Fibonacci # must match with the testplan
    func_mem: 128
    func_cpu: 0.5
    func_runtime: python310
    func_handler: fibonacci.handler
    func_src: fibonacci.py

    # ImageClassification
    func_name_2: ImageClass
    func_mem_2: 768
    func_cpu_2: 1.0
    func_runtime_2: custom
    func_image: grussorusso/serverledge-imageclass

    testplan: jmeter/testplanClosed2groups.jmx
    users: 25
    local_results_file: test_results.csv
    local_responses_file: responses.tar.gz

  tasks:
    - name: Install JMeter
      include_role:
        role: jmeter
      vars:
        jmeter_home: "{{ ansible_env.HOME }}"

    - name: Install serverledge-cli
      include_role:
        role: serverledge
      vars:
        deploy_cli_only: true

    - ansible.builtin.copy:
        src: files/sleep.py
        dest: "{{ ansible_env.HOME }}/sleep.py"

    - ansible.builtin.copy:
        src: files/sieve.js
        dest: "{{ ansible_env.HOME }}/sieve.js"

    - ansible.builtin.copy:
        src: files/fibonacci.py
        dest: "{{ ansible_env.HOME }}/fibonacci.py"

    - ansible.builtin.shell: "./serverledge/serverledge-cli delete -f {{ func_name }}"
      ignore_errors: True
      environment:
        SERVERLEDGE_HOST: '{{ groups["sedge_Edge"][0] }}'

          #- ansible.builtin.shell: "./serverledge-cli create -f myFunction --memory 128 --cpu 1.0 --src sieve.js --runtime nodejs17ng --handler sieve.js"
          #  environment:
          #    SERVERLEDGE_HOST: '{{ groups["sedge_Edge"][0] }}'
    - ansible.builtin.shell: "./serverledge/serverledge-cli create -f {{ func_name }} --memory {{ func_mem }} --cpu {{ func_cpu }} --src {{ func_src }} --runtime {{ func_runtime }} --handler {{ func_handler }}"
      environment:
        SERVERLEDGE_HOST: '{{ groups["sedge_Edge"][0] }}'

    - ansible.builtin.shell: "./serverledge/serverledge-cli delete -f {{ func_name_2 }}"
      ignore_errors: True
      environment:
        SERVERLEDGE_HOST: '{{ groups["sedge_Edge"][0] }}'

          #- ansible.builtin.shell: "./serverledge-cli create -f myFunction --memory 128 --cpu 1.0 --src sieve.js --runtime nodejs17ng --handler sieve.js"
        #  environment:
        #    SERVERLEDGE_HOST: '{{ groups["sedge_Edge"][0] }}'
    - ansible.builtin.shell: "./serverledge/serverledge-cli create -f {{ func_name_2 }} --memory {{ func_mem_2 }} --cpu {{ func_cpu_2 }} --runtime {{ func_runtime_2 }} --custom_image {{ func_image }}"
      environment:
        SERVERLEDGE_HOST: '{{ groups["sedge_Edge"][0] }}'

    - name: Copy testplan
      ansible.builtin.copy:
        src: "{{ testplan }}"
        dest: ./testplan.jmx

    - name: Clean previous test_results
      ansible.builtin.shell: "rm /tmp/jmeter*"
      ignore_errors: True

    - name: Clean previous responses
      ansible.builtin.shell: "find . -name 'jmeterResponse_*' -delete"
      ignore_errors: True

    - name: Stop any running Jmeter instance
      ansible.builtin.shell: "pgrep jmeter | xargs kill -TERM"
      ignore_errors: True

    - name: Configure sample variables
      ansible.builtin.shell: "echo 'sample_variables=qosClass,schedulingAction,cost' >> {{ ansible_env.HOME }}/apache-jmeter-5.5/bin/user.properties"

    - name: Start 
      ansible.builtin.shell: "{{ ansible_env.HOME }}/apache-jmeter-5.5/bin/jmeter -n -t ./testplan.jmx -l /tmp/jmeter_results -Jhost={{ groups['sedge_Edge'][0] }} -Jusers={{ users }}"
      async: 900
      poll: 20
      register: jmeter_out

    #- name: Zip Response files
    #  community.general.archive:
    #    path:
    #      - jmeterResponse_*
    #    dest: /tmp/jmeter_responses.tar.gz
    #    format: gz
    #    remove: yes

    - name: Copy test_results
      ansible.builtin.fetch: 
        src: /tmp/jmeter_results
        dest: "{{ local_results_file }}"
        flat: yes

    #- name: Copy responses
    #  ansible.builtin.fetch:
    #    src: /tmp/jmeter_responses.tar.gz
    #    dest: "{{ local_responses_file }}"
    #    flat: yes

    - debug:
        var: jmeter_out.stdout_lines

- name: Get monitoring data
  hosts: 
    - sedge_Edge
    - sedge_Cloud
  vars:
    local_output_dir: "."
  tasks:
    - name: Stop systemd service
      ansible.builtin.systemd:
        name: monitorCPU
        state: stopped
      become: yes

    - name: Copy monitoring data
      ansible.builtin.fetch: 
        src: "{{ ansible_env.HOME }}/cpuUsage.txt"
        dest: "{{ local_output_dir }}/cpuUsage-{{ ansible_hostname }}.txt"
        flat: yes
